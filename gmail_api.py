from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from email.mime.text import MIMEText
import base64
import os
from config import GMAIL_TOKEN_PATH, GMAIL_CREDENTIALS_PATH, GMAIL_SCOPES

SCOPES = ["https://www.googleapis.com/auth/gmail.send"]

def get_gmail_service():
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    service = build("gmail", "v1", credentials=creds)
    return service

def extract_subject(text):
    """
    根據任務描述自動生成 email 主旨（最多 30 字）
    """
    if not text:
        return "Notification from SIIHA"
    cleaned = text.strip().replace("\n", " ").replace(".", "")
    return cleaned[:30] + "..." if len(cleaned) > 30 else cleaned

def send_email(to, subject, body_text, task_description=None):
    service = get_gmail_service()

    # 主旨補齊策略
    if not subject or subject.strip() == "":
        if task_description:
            subject = extract_subject(task_description)
        else:
            subject = "Notification from SIIHA"

    # 內容補齊策略
    if not body_text or body_text.strip() == "":
        if task_description:
            body_text = task_description.strip()
        else:
            body_text = "This message was generated by SIIHA Assistant."

    # 加上預設落款
    body_text += "\n\n---\nThis message was generated by SIIHA Assistant."

    message = MIMEText(body_text)
    message["to"] = to
    message["subject"] = subject
    raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
    message_body = {"raw": raw}
    try:
        sent_message = service.users().messages().send(userId="me", body=message_body).execute()
        print(f"Message Id: {sent_message['id']}")
        return sent_message
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

def list_emails(max_results=5):
    service = get_gmail_service()
    try:
        results = service.users().messages().list(userId='me', labelIds=['INBOX'], maxResults=max_results).execute()
        messages = results.get('messages', [])
        emails = []
        for msg in messages:
            msg_data = service.users().messages().get(userId='me', id=msg['id']).execute()
            headers = msg_data['payload']['headers']
            subject = next((h['value'] for h in headers if h['name'] == 'Subject'), '')
            sender = next((h['value'] for h in headers if h['name'] == 'From'), '')
            snippet = msg_data.get('snippet', '')
            emails.append({'from': sender, 'subject': subject, 'snippet': snippet})
        return emails
    except Exception as e:
        print(f"Failed to fetch emails: {e}")
        return []

def delete_email_by_subject(subject_keyword):
    service = get_gmail_service()
    try:
        response = service.users().messages().list(userId='me', q=f"subject:{subject_keyword}").execute()
        messages = response.get('messages', [])
        if not messages:
            return f"No emails found with subject containing '{subject_keyword}'."
        for msg in messages:
            service.users().messages().delete(userId='me', id=msg['id']).execute()
        return f"Deleted {len(messages)} emails with subject containing '{subject_keyword}'."
    except Exception as e:
        return f"An error occurred: {e}"
